cmake_minimum_required(VERSION 3.21)

set(MCU_MODEL "PY32F071xB" CACHE STRING "MCU model")
option(ENABLE_HAL_DRIVER "Enable HAL driver" ON)
option(ENABLE_LL_DRIVER "Enable LL driver" ON)
option(ENABLE_BSP_DRIVER "Enable BSP driver" ON)
option(ENABLE_SYSTEM_XXX_C "Enable system_XXX.c" ON)
option(ENABLE_STARTUP_FILE "Enable STARTUP file" ON)
option(ENABLE_LD_SCRIPT "Enable linker script" ON)
option(ENABLE_DEBUG_DEFINE "Enable debug define" ON)

add_library(drivers_${MCU_LOWER} INTERFACE)

function(add_driver NAME)
    if (NOT TARGET driver_${MCU_LOWER}_${NAME})
        # Choosing not to add LIB_HARDWARE_ defines to avoid command line bloat pending a need (they aren't
        #   super interesting except to determine functionality as they are mostly passive accessors, however
        #   they could be useful to determine if the header is available.
        # pico_add_sdk_impl_library(driver_${NAME})
        add_library(driver_${MCU_LOWER}_${NAME} INTERFACE)

        file(GLOB SOURCES ${CMAKE_CURRENT_LIST_DIR}/Src/*)
        target_sources(drivers_${MCU_LOWER} PUBLIC ${SOURCES})

        target_include_directories(driver_${MCU_LOWER}_${NAME} INTERFACE
                ${CMAKE_CURRENT_LIST_DIR}/Inc)
        target_link_libraries(drivers_${MCU_LOWER} INTERFACE driver_${MCU_LOWER}_${NAME})
    endif()
endfunction()

##
##

# Startup file

set(LIB ${CMAKE_CURRENT_LIST_DIR}/Libraries)

set(MCU_MODEL_LOWER $<LOWER_CASE:${MCU_MODEL}>)
if("${MCU_MODEL}" MATCHES "PY32F002A|PY32F003|PY32F030")
    set(MCU_FAMILY "PY32F0xx")
    set(MCU_FAMILY_LOWER $<LOWER_CASE:${MCU_FAMILY}>)
elseif("${MCU_MODEL}" MATCHES "PY32F002B")
    set(MCU_FAMILY "PY32F002B")
    set(MCU_FAMILY_LOWER $<LOWER_CASE:${MCU_FAMILY}>)
elseif("${MCU_MODEL}" MATCHES "PY32F071|PY32F072")
    set(MCU_FAMILY "PY32F07x")
    set(MCU_FAMILY_LOWER $<LOWER_CASE:${MCU_FAMILY}>)
endif()

target_include_directories(drivers_${MCU_LOWER} INTERFACE ${LIB}/CMSIS/Include)
target_include_directories(drivers_${MCU_LOWER} INTERFACE ${LIB}/CMSIS/Core/Include)

if(${ENABLE_SYSTEM_XXX_C})
    target_sources(drivers_${MCU_LOWER} PUBLIC ${LIB}/CMSIS/Device/PY32F0xx/Source/system_${MCU_FAMILY_LOWER}.c)
    target_include_directories(drivers_${MCU_LOWER} INTERFACE ${LIB}/CMSIS/Device/PY32F0xx/Include)
endif()

if(${ENABLE_HAL_DRIVER})
    add_subdirectory(${LIB}/${MCU_FAMILY}_HAL_Driver)
  if(${ENABLE_BSP_DRIVER})
    add_subdirectory(${LIB}/${MCU_FAMILY}_HAL_BSP)
  endif()
endif()
if(${ENABLE_LL_DRIVER})
    add_subdirectory(${LIB}/${MCU_FAMILY}_LL_Driver)
  if(${ENABLE_BSP_DRIVER})
    add_subdirectory(${LIB}/${MCU_FAMILY}_LL_BSP)
  endif()
endif()


if (${MCU_MODEL} MATCHES "PY32F002B")
    set(STARTUP "py32f002b")
elseif (${MCU_MODEL} MATCHES "PY32F071")
    set(STARTUP "py32f072")
    if (ENABLE_LL_DRIVER)
        message(FATAL_ERROR "LL library not supported for ${mcu_upper}")
    endif()
elseif (${MCU_MODEL} MATCHES "PY32F072")
    set(STARTUP "py32f072")
    if (ENABLE_LL_DRIVER)
        message(FATAL_ERROR "LL library not supported for ${mcu_upper}")
    endif()
else()
    if (${MCU_MODEL} MATCHES "PY32F002A")
        set(STARTUP "py32f002a")
    elseif (${MCU_MODEL} MATCHES "PY32F003")
        set(STARTUP "py32f003")
    elseif (${MCU_MODEL} MATCHES "PY32F030")
        set(STARTUP "py32f030")
    else()
        message(FATAL_ERROR "MCU not supported")
    endif()
endif()

if(${ENABLE_STARTUP_FILE})
    target_sources(drivers_${MCU_LOWER} PUBLIC ${LIB}/CMSIS/Device/PY32F0xx/Source/gcc/startup_${STARTUP}.s)
endif()

# ld_script
if(${ENABLE_STARTUP_FILE})
    set(LINKER_SCRIPT ${LIB}/LDScripts/${MCU_MODEL_LOWER}.ld)
    target_link_options(drivers_${MCU_LOWER} INTERFACE -T ${LINKER_SCRIPT})
endif()

if(${ENABLE_DEBUG_DEFINE})
    target_compile_definitions(drivers_${MCU_LOWER} INTERFACE -DDEBUG)
endif()

target_compile_definitions(drivers_${MCU_LOWER} INTERFACE -D${MCU_MODEL})
